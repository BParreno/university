// This is your Prisma schema file,
// learn more in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisely/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      RoleName @default(STUDENT)
  studentId Int?     @unique
  teacherId Int?     @unique
  student   Student? @relation(fields: [studentId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Major {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  students    StudentMajor[]
  subjects    MajorSubject[]
  teachers    TeacherMajor[]
}

model Subject {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  majors      MajorSubject[]
  students    StudentSubject[]
  teachers    TeacherSubject[] // ¡Esta línea es la que faltaba y fue corregida!
}

model Student {
  id       Int              @id @default(autoincrement())
  name     String
  majors   StudentMajor[]
  subjects StudentSubject[]
  user     User?
}

model Teacher {
  id       Int              @id @default(autoincrement())
  name     String
  majors   TeacherMajor[]
  subjects TeacherSubject[] // La relación con Subject se manejará exclusivamente a través de TeacherSubject
  user     User?
}

model StudentMajor {
  studentId Int
  majorId   Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  major     Major   @relation(fields: [majorId], references: [id], onDelete: Cascade)

  @@id([studentId, majorId])
}

model StudentSubject {
  studentId Int
  subjectId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([studentId, subjectId])
}

model MajorSubject {
  majorId   Int
  subjectId Int
  major     Major   @relation(fields: [majorId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([majorId, subjectId])
}

model TeacherMajor {
  teacherId Int
  majorId   Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  major     Major   @relation(fields: [majorId], references: [id], onDelete: Cascade)

  @@id([teacherId, majorId])
}

model TeacherSubject {
  teacherId Int
  subjectId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([teacherId, subjectId]) // Clave primaria compuesta para la relación muchos a muchos
}
